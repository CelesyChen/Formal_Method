WHITESPACE = _{ " " | "\t" | NEWLINE }
NEWLINE = _{ "\n" | "\r\n" }
COMMENT = _{ "--" ~ (!NEWLINE ~ ANY)* }

program = { SOI ~ (module_decl)* ~ EOI }

module_decl = { "MODULE" ~ identifier ~ module_body }

module_body = { (var_decl | define_decl | assign_block | init_block | spec_decl)* }

var_decl = _{ "VAR" ~ var_list+ }
define_decl = _{ "DEFINE" ~ define_list+ }
assign_block = _{ "ASSIGN" ~ assign_list+ } // assign 现在不能处理init
init_block = _{ "INIT" ~ init_list+ } 
spec_decl = _{ spec_list+ }

// 我们舍弃了TRANS，现在只能在assign里定义转移，这能提高语义的正交性

var_list = { identifier ~ ":" ~ type ~ ";" }
define_list = { identifier ~ ":=" ~ identifier ~ "in" ~ atom_list ~ ";" } // 这里需要在语义分析时确认类型正确
assign_list = { identifier ~ ":=" ~ (case_assign | single_assign) ~ ";" } 
init_list = { identifier ~ ":=" ~ atom ~ ";" } // 所有init以 ; 结尾
spec_list = { "CTLSPEC" ~ ctl_term ~ ";" }

type = {
  Bool
  | Int ~ "[" ~ number ~ ".." ~ number ~ "]"
  | Enum ~ "{" ~ identifier ~ ("," ~ identifier)* ~ "}"
}

Bool = { "bool" }
Int = { "int" }
Enum = { "enum" }

case_assign = { ^"case" ~ case_item+ ~ ^"esac" }
single_assign = { atom } // 这里需要在语义分析时确认类型正确

case_item = { (identifier ~ "=" ~ atom | default) ~ ":" ~ atom_list ~ ";" }

atom_list = { atom_set | atom }
atom_set = _{ "{" ~ atom ~ ("," ~ atom)* ~ "}" }

atom = { TRUE | FALSE | identifier | number }

TRUE = { ^"true" }
FALSE = { ^"false" }

identifier = @{ ASCII_ALPHA ~ ( ASCII_ALPHANUMERIC | "_")* }
number = @{ ASCII_DIGIT+ }

default = { "_" }

ctl_term = { (!";" ~ ANY )* }